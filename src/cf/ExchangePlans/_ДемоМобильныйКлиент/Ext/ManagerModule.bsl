///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Проверяет наличие прав на запуск синхронизации основного и автономного серверов.
//
// Возвращаемое значение:
//  Булево - Истина, если есть права на запуск синхронизации.
//
Функция ТребуетсяОбменДаннымиСАвтономнымПриложением() Экспорт

	// АПК:336-выкл Не заменять на РолиДоступны, т.к. проверка ролей осуществляется в режиме автономной конфигурации.
	Возврат РольДоступна("_ДемоОбменМобильныйКлиент"); // @skip-check using-isinrole
	// АПК:336-вкл
	
КонецФункции

// Возвращает количество принятых и отправленных записей.
//
// Возвращаемое значение:
//  Структура:
//   * Принято - Число - количество принятых записей
//   * Отправлено - Число - количество отправленных записей
//
Функция ПринятоОтправленоНовыхЗаписей() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Принято", Константы._ДемоПринятоЗаписей.Получить());
	Результат.Вставить("Отправлено", Константы._ДемоОтправленоЗаписей.Получить());
	Возврат Результат;
	
КонецФункции

// Проверяет, завершено ли фоновое задание синхронизации данных.
//
// Параметры:
//  Идентификатор - УникальныйИдентификатор - идентификатор фонового задания.
//  ТекстОшибки - Строка - параметр для возврата информации об ошибках.
//
// Возвращаемое значение:
//  Булево - Истина, если задание завершено.
//
Функция ОбменДаннымиЗакончен(Знач Идентификатор, ТекстОшибки) Экспорт
	
	ТекстОшибки = "";
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	Если Задание = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		ТекстОшибки = Задание.ИнформацияОбОшибке.Описание;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

// Запускает фоновое задание для синхронизации данных.
//
// Возвращаемое значение:
//  УникальныйИдентификатор
//
Функция ВыполнитьОбменДаннымиВФоне() Экспорт
	
	Задание = ФоновыеЗадания.Выполнить("_ДемоОбменМобильныйКлиентАвтономныйВызовСервера.ВыполнитьОбменДанными",,, 
		"Синхронизация");
	Возврат Задание.УникальныйИдентификатор;
	
КонецФункции

// Формирует пакет обмена, который будет отправлен узлу УзелОбмена. 
//
// Параметры:
//  УзелОбмена - ПланОбменаСсылка - узел плана обмена "мобильные", с которым осуществляется обмен.
//
// Возвращаемое значение:
//  ХранилищеЗначения - сформированный пакет обмена.
//
Функция СформироватьПакетОбмена(УзелОбмена)
	
	ИмяФайлаXML = СформироватьXML(УзелОбмена);
	Пакет = Новый ДвоичныеДанные(ИмяФайлаXML);
	ХранилищеПакет = Новый ХранилищеЗначения(Пакет, Новый СжатиеДанных(9));
	Возврат ХранилищеПакет;
	
КонецФункции

// Вносит в информационную базу данные, которые присланы из узла УзелОбмена. 
//
// Параметры:
//  УзелОбмена - ПланОбменаСсылка - узел плана обмена "мобильные", с которым осуществляется обмен.
//  ДанныеОбмена - ХранилищеЗначения - пакет обмена, полученный из узла УзелОбмена.
//
Процедура ПринятьПакетОбмена(УзелОбмена, ДанныеОбмена)
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные = ДанныеОбмена.Получить(); // ДвоичныеДанные
	ДвоичныеДанные.Записать(ИмяФайла);
	
	УстановитьПривилегированныйРежим(Истина);
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла,,,"UTF-8");
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель,ЧтениеСообщения.НомерПринятого);
	
	НачатьТранзакцию();
	Попытка
		Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
			Данные = ПрочитатьДанные(ЧтениеXML);
			Если Данные <> Неопределено Тогда
				Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
				Данные.ОбменДанными.Загрузка = Истина;
				Данные.Записать();
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	ЧтениеСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();
	
	УдалитьФайлы(ИмяФайла);
	
КонецПроцедуры

// Записывает данные в формат XML.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML
//  Данные - Произвольный - данные, подлежащие записи в формат XML.
//
Процедура ЗаписатьДанные(ЗаписьXML, Данные) Экспорт
	
	СнимкиОтчетов.ЗаписатьОтчетыВXML(ЗаписьXML, Данные);
	
#Если МобильныйАвтономныйСервер Тогда
	Константы._ДемоОтправленоЗаписей.Установить(Константы._ДемоОтправленоЗаписей.Получить() + 1);
#КонецЕсли
	
КонецПроцедуры

// Читает данные из формата XML.
//
// Параметры:
//  ЧтениеXML - ЧтениеXML
//
// Возвращаемое значение:
//  Произвольный - прочитанное значение.
//
Функция ПрочитатьДанные(ЧтениеXML)
	
	Данные = СнимкиОтчетов.ПрочитатьОтчетыИзXML(ЧтениеXML);
	
#Если МобильныйАвтономныйСервер Тогда
	Константы._ДемоПринятоЗаписей.Установить(Константы._ДемоПринятоЗаписей.Получить() + 1);
#КонецЕсли
	
	Возврат Данные;
	
КонецФункции

Функция СформироватьXML(УзелОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаписьXML = Новый ЗаписьXML;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения);
	Пока ВыборкаИзменений.Следующий() Цикл
		Данные = ВыборкаИзменений.Получить();
		ЗаписатьДанные(ЗаписьXML, Данные);
	КонецЦикла;
	
	ЗаписьСообщения.ЗакончитьЗапись();
	ЗаписьXML.Закрыть();
	
	Возврат ИмяФайла;
	
КонецФункции

// Возвращает массив узлов плана обмена с учетом исключаемых.
//
// Возвращаемое значение:
//  Массив из ПланОбменаСсылка._ДемоМобильныйКлиент
//
Функция УзлыДляРегистрации() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	_ДемоМобильныйКлиент.Ссылка
	|ИЗ
	|	ПланОбмена._ДемоМобильныйКлиент КАК _ДемоМобильныйКлиент
	|ГДЕ
	|	НЕ _ДемоМобильныйКлиент.ПометкаУдаления
	|	И НЕ _ДемоМобильныйКлиент.ЭтотУзел");
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

// Регистрирует объекты в узлах обмена мобильного приложения.
//
// Параметры:
//  МассивУзлов - Массив из ПланОбменаСсылка._ДемоМобильныйКлиент
//  Объект - Массив, СправочникОбъект, РегистрСведенийНаборЗаписей - объект, для которого регистрируются изменения.
//
Процедура ЗарегистрироватьИзмененияДляУзловОбмена(МассивУзлов, Объект) Экспорт
	
	Если МассивУзлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ТипЗнч(Объект) = Тип("Массив") Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект);
	Иначе
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует объекты в узлах обмена мобильного приложения.
//
// Параметры:
//  МассивУзлов - Массив из ПланОбменаСсылка._ДемоМобильныйКлиент
//  НаборЗаписей - РегистрСведенийНаборЗаписей - объект, для которого регистрируются изменения.
//
Процедура ЗарегистрироватьИзмененияДляУзловОбменаРегистры(МассивУзлов, НаборЗаписей) Экспорт
	
	Если МассивУзлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, НаборЗаписей);
	
КонецПроцедуры

// Запускает синхронизацию основного и автономного серверов.
// 
// Параметры:
//  КодУзла - Строка
//  НаименованиеМобильногоКомпьютера - Строка
//  НомерОтправленного - Число
//  НомерПринятого - Число
//
// Возвращаемое значение:
//  Строка - код узла синхронизации
//
Функция НачатьСинхронизацию(КодУзла, НаименованиеМобильногоКомпьютера, НомерОтправленного, НомерПринятого) Экспорт

	ПланОбменаОбъектМетаданных = Метаданные.ПланыОбмена._ДемоМобильныйКлиент;
	Если НЕ ПравоДоступа("Чтение", ПланОбменаОбъектМетаданных) Тогда
		ВызватьИсключение(НСтр("ru='Недостаточно прав на синхронизацию данных с мобильным приложением.'"), 
			КатегорияОшибки.НарушениеПравДоступа);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ПланОбменаОбъектМетаданных.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭтотУзел());
		Блокировка.Заблокировать();

		УзелОбмена = ЭтотУзел().ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(УзелОбмена.Код) Тогда
			УзелОбмена.Код = "001";
			УзелОбмена.Наименование = НСтр("ru = 'Центральный'");
			УзелОбмена.Записать();
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	УзелОбмена = НайтиПоКоду(КодУзла); 
	Если УзелОбмена.Пустая() Тогда
		
		НовыйУзел = СоздатьУзел();
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			Блокировка.Добавить("Константа._ДемоКодНовогоУзлаПланаОбмена");
			Блокировка.Заблокировать();
			
			КодНовогоУзла = Константы._ДемоКодНовогоУзлаПланаОбмена.Получить();
			Если КодНовогоУзла = 0 Тогда 
				КодНовогоУзла = 2;
			КонецЕсли;	
			Константы._ДемоКодНовогоУзлаПланаОбмена.Установить(КодНовогоУзла + 1);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		Если СтрДлина(КодНовогоУзла) < 3 Тогда
			НовыйУзел.Код = Формат(КодНовогоУзла, "ЧЦ=3; ЧВН=");
		Иначе
			НовыйУзел.Код = КодНовогоУзла;
		КонецЕсли;
		НовыйУзел.Наименование = НаименованиеМобильногоКомпьютера;
		НовыйУзел.НомерОтправленного = НомерОтправленного;
		НовыйУзел.НомерПринятого = НомерПринятого;
		НовыйУзел.Записать();
		
		СнимкиОтчетов.ЗарегистрироватьИзмененияДанных(НовыйУзел.Ссылка);
		
		Возврат НовыйУзел.Код;
		
	КонецЕсли;
		
	ЗарегистрироватьИзмененияДанных = Ложь;
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ПланОбменаОбъектМетаданных.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", УзелОбмена);
		Блокировка.Заблокировать();
		
		СведенияОбУзлеОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УзелОбмена, 
			"Наименование,ПометкаУдаления,НомерОтправленного,НомерПринятого");
		Если СведенияОбУзлеОбмена.ПометкаУдаления 
			Или СведенияОбУзлеОбмена.Наименование <> НаименованиеМобильногоКомпьютера Тогда
			
			Узел = УзелОбмена.ПолучитьОбъект();
			Узел.ПометкаУдаления = Ложь;
			Узел.Наименование = НаименованиеМобильногоКомпьютера;
			Узел.Записать();
			
		КонецЕсли;
		
		ЗарегистрироватьИзмененияДанных = СведенияОбУзлеОбмена.НомерОтправленного <> НомерОтправленного 
			Или СведенияОбУзлеОбмена.НомерПринятого <> НомерПринятого;
		Если ЗарегистрироватьИзмененияДанных Тогда
			
			Узел = УзелОбмена.ПолучитьОбъект();
			Узел.НомерОтправленного = НомерОтправленного;
			Узел.НомерПринятого = НомерПринятого;
			Узел.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если ЗарегистрироватьИзмененияДанных Тогда
		СнимкиОтчетов.ЗарегистрироватьИзмененияДанных(УзелОбмена);
	КонецЕсли;
	
	Возврат Узел.Код;

КонецФункции

#Если МобильныйАвтономныйСервер Тогда
	
Процедура ВыполнитьОбменДаннымиВМобильномАвтономномСервере() Экспорт
	
	ЦентральныйУзелОбмена = НайтиПоКоду("001");
	Если ЦентральныйУзелОбмена.Пустая() Тогда
		
		НовыйУзел = СоздатьУзел();
		НовыйУзел.Код = "001";
		НовыйУзел.Наименование = НСтр("ru='Центральный'");
		НовыйУзел.Записать();
		ЦентральныйУзелОбмена = НовыйУзел.Ссылка;
		
	КонецЕсли;
	
	Узел = ЭтотУзел();
	// Инициализируем обмен, проверяем, есть ли нужный узел в плане обмена.
	КодУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Узел, "Код");
	СвойстваЦентральногоУзла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЦентральныйУзелОбмена, "НомерПринятого,НомерОтправленного");
	НаименованиеУзла = НСтр("ru='Автономный узел'");
	НовыйКод = ОсновнойСервер._ДемоОбменМобильныйКлиентВызовСервера.НачатьСинхронизацию(КодУзла, НаименованиеУзла,
		СвойстваЦентральногоУзла.НомерПринятого, СвойстваЦентральногоУзла.НомерОтправленного);
	
	Если КодУзла <> НовыйКод Тогда

		НачатьТранзакцию();

		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("ПланОбмена._ДемоМобильныйКлиент");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Узел);
			Блокировка.Заблокировать();

			ОбъектУзла = Узел.ПолучитьОбъект();
			ОбъектУзла.Код = НовыйКод;
			ОбъектУзла.Наименование = НаименованиеУзла;
			ОбъектУзла.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;

	КонецЕсли;

	Константы._ДемоОтправленоЗаписей.Установить(0);
	Константы._ДемоПринятоЗаписей.Установить(0);
	ДанныеОбмена = СформироватьПакетОбмена(ЦентральныйУзелОбмена);
	ДанныеОбмена = ОсновнойСервер._ДемоОбменМобильныйКлиентВызовСервера.ВыполнитьОбменДанными(КодУзла, ДанныеОбмена);
	ПринятьПакетОбмена(ЦентральныйУзелОбмена, ДанныеОбмена);

КонецПроцедуры

#Иначе

// Выполняет синхронизацию данных:
// получает пакет изменений предназначенных для данного узла и
// записывает пакет изменений принятых от данного узла.
//
// Параметры:
//  КодУзла - Строка - код узла, с которым идет синхронизация данных.
//  ДанныеМобильногоПриложения - ХранилищеЗначения - хранилище, в которое помещен пакет обмена.
//
// Возвращаемое значение:
//  ХранилищеЗначения
//
Функция ВыполнитьОбменДанными(КодУзла, ДанныеМобильногоПриложения) Экспорт
	
	УзелОбмена = НайтиПоКоду(КодУзла); 
	
	Если УзелОбмена.Пустая() Тогда
		ТекстОшибки = НСтр("ru='Невозможно выполнить синхронизацию данных с мобильным устройством, т.к. соответствующий ему узел с кодом %1 не существует.'");
		ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, КодУзла));
	КонецЕсли;
	
	ПринятьПакетОбмена(УзелОбмена, ДанныеМобильногоПриложения);
	Возврат СформироватьПакетОбмена(УзелОбмена);
	
КонецФункции

#КонецЕсли

#КонецОбласти

#КонецЕсли