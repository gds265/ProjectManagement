///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Продавец.Партнер)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проводит непроведенные документы _ДемоСчетФактураПолученный. Вызывается из обработчика исправления проблемы 
// непроведенных документов, см. _ДемоСтандартныеПодсистемыКлиент.ПровестиСчетаФактурыПоПроблемнымКонтрагентам.
// Такие документы выявляются проверкой _ДемоСтандартныеПодсистемы.ПроверитьПроведенностьСчетаФактурыПолученного.
//
// Параметры:
//    ПараметрыПроверки - Структура:
//        * ВидПроверки - СправочникСсылка.ВидыПроверок - вид осуществляемой проверки.
//    АдресХранилища - Строка - адрес временного хранилища для возвращаемого значения.
//
Процедура ПровестиСчетаФактурыПоПроблемнымКонтрагентам(Знач ПараметрыПроверки, АдресХранилища = Неопределено) Экспорт
	
	ПравилоПроверки = КонтрольВеденияУчета.ПроверкаПоИдентификатору("Демо.ПроверитьПроведенностьСчетаФактурыПолученного");
	ВидПроверки = ПараметрыПроверки.ВидПроверки;
	Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПроверки, "Свойство2");

	ПараметрыВыборки = КонтрольВеденияУчета.ПараметрыВыборкиПроблемныхОбъектов();
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ПараметрыВыборки.ДополнительныеУсловия = 
			"ВЫРАЗИТЬ(РезультатыПроверкиУчета.ВидПроверки.Свойство2 КАК Справочник._ДемоКонтрагенты) = &Контрагент";
		ПараметрыВыборки.ДополнительныеПараметры["Контрагент"] = Контрагент;
	КонецЕсли;
	Результат = КонтрольВеденияУчета.ПроблемныеОбъекты(ПравилоПроверки, ПараметрыВыборки);
	
	ПодробнаяИнформацияПоПроблемам = Новый Соответствие;
	
	КоличествоПроведенных            = 0;
	КоличествоНепроведенных          = 0;
	КоличествоНеправильноЗаполненных = 0;
	
	Пока Результат.Количество() > 0 Цикл
		
		Для Каждого СтрокаРезультата Из Результат Цикл
			
			ДокументСсылка = СтрокаРезультата.ПроблемныйОбъект;
			НачатьТранзакцию();
			
			Попытка
				
				БлокировкаДанных = Новый БлокировкаДанных;
				ЭлементБлокировки = БлокировкаДанных.Добавить("Документ._ДемоСчетФактураПолученный");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументСсылка);
				БлокировкаДанных.Заблокировать();
				
				ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
				
				Если ДокументОбъект = Неопределено Или ДокументОбъект.Проведен Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
					ОтменитьТранзакцию();
					ПодробнаяИнформацияПоПроблемам.Вставить(ДокументСсылка, ОшибкиЗаполненияОбъекта());
					КоличествоНеправильноЗаполненных = КоличествоНеправильноЗаполненных + 1;
					Продолжить;
				КонецЕсли;
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				КоличествоПроведенных = КоличествоПроведенных + 1;
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ПодробнаяИнформацияПоПроблемам.Вставить(ДокументСсылка, 
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КоличествоНепроведенных = КоличествоНепроведенных + 1;
			КонецПопытки;
			
		КонецЦикла;
		
		ПараметрыВыборки.НачальныйПроблемныйОбъект = ДокументСсылка;
		// @skip-check query-in-loop - порционная обработка больших объемов данных.
		Результат = КонтрольВеденияУчета.ПроблемныеОбъекты(ПравилоПроверки, ПараметрыВыборки);
		
	КонецЦикла;
	
	ИтоговыйРезультат = Новый Структура;
	ИтоговыйРезультат.Вставить("КоличествоПроведенных",            КоличествоПроведенных);
	ИтоговыйРезультат.Вставить("КоличествоНепроведенных",          КоличествоНепроведенных);
	ИтоговыйРезультат.Вставить("КоличествоНеправильноЗаполненных", КоличествоНеправильноЗаполненных);
	ИтоговыйРезультат.Вставить("ПодробнаяИнформацияПоПроблемам",   ПодробнаяИнформацияПоПроблемам);
	
	ПоместитьВоВременноеХранилище(ИтоговыйРезультат, АдресХранилища);
	
КонецПроцедуры

Функция ОшибкиЗаполненияОбъекта()
	
	УточнениеПроблемы = "";
	Для Каждого ПользовательскоеСообщение Из ПолучитьСообщенияПользователю(Истина) Цикл
		УточнениеПроблемы = УточнениеПроблемы + ?(ЗначениеЗаполнено(УточнениеПроблемы), Символы.ПС, "") + ПользовательскоеСообщение.Текст;
	КонецЦикла;
	
	Возврат ?(ПустаяСтрока(УточнениеПроблемы), НСтр("ru = 'Для подробной информации откройте форму объекта.'"), УточнениеПроблемы);
	
КонецФункции

#КонецОбласти
	
#КонецЕсли
